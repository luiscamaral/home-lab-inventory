# Comprehensive Security Scanning Workflow
# This workflow runs comprehensive security scans on the repository
# including container scanning, code analysis, dependency scanning, secret detection,
# and Dockerfile security linting with proper caching for optimal performance

name: Security Scanning

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
  
  # Trigger on pull requests targeting main
  pull_request:
    branches: [ main ]
  
  # Scheduled daily scan at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Run full security scan including all images'
        required: false
        type: boolean
        default: false
      scan_built_images:
        description: 'Scan images from registry after build'
        required: false
        type: boolean
        default: true

# Define environment variables
env:
  # GitHub token for authenticated API calls
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Registry settings
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}

# Define job permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  packages: read
  id-token: write

jobs:
  # Job 1: Secret Scanning with Gitleaks
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for comprehensive secret scanning
          fetch-depth: 0
      
      # Cache Gitleaks database for faster subsequent runs
      - name: Cache Gitleaks database
        uses: actions/cache@v4
        with:
          path: ~/.gitleaks
          key: gitleaks-db-${{ runner.os }}-${{ hashFiles('**/*.toml', '.gitleaks.toml') }}
          restore-keys: |
            gitleaks-db-${{ runner.os }}-
      
      - name: Run Gitleaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional: for enhanced features
        with:
          # Generate SARIF report for GitHub Security tab
          format: sarif
          output: gitleaks.sarif
          config-path: .gitleaks.toml # Optional: custom config
      
      - name: Upload Gitleaks SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: secrets
      
      - name: Archive secret scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results-${{ github.run_number }}
          path: gitleaks.sarif
          retention-days: 30

# Workflow-level cleanup job
cleanup:
  name: Cleanup Resources
  runs-on: ubuntu-latest
  needs: [performance-monitoring, notification]
  if: always()
  steps:
    - name: Summary
      run: |
        echo "üèÅ Security scanning workflow completed"
        echo "All security scans have been executed and results are available in:"
        echo "- GitHub Security tab"
        echo "- Workflow artifacts"
        echo "- SARIF reports uploaded to code scanning"
        echo ""
        echo "Next steps:"
        echo "1. Review any security findings"
        echo "2. Address critical and high-priority issues"
        echo "3. Monitor the Security tab for ongoing threats"
        echo "4. Keep dependencies and base images updated"

  # Job 2: Dockerfile Security Linting with Hadolint
  dockerfile-lint:
    name: Dockerfile Security Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Find all Dockerfiles
        id: find-dockerfiles
        run: |
          DOCKERFILES=$(find . -name "Dockerfile" -o -name "*.dockerfile" | grep -v node_modules | grep -v .git || true)
          echo "dockerfiles<<EOF" >> $GITHUB_OUTPUT
          echo "$DOCKERFILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Found Dockerfiles: $DOCKERFILES"
      
      - name: Run Hadolint on all Dockerfiles
        if: steps.find-dockerfiles.outputs.dockerfiles != ''
        run: |
          # Install hadolint
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/
          
          # Create output directory
          mkdir -p hadolint-results
          
          # Run hadolint on each Dockerfile
          while IFS= read -r dockerfile; do
            if [ -n "$dockerfile" ] && [ -f "$dockerfile" ]; then
              echo "Scanning $dockerfile"
              filename=$(echo "$dockerfile" | sed 's|/|-|g' | sed 's|^\.-||')
              hadolint "$dockerfile" --format sarif > "hadolint-results/hadolint-${filename}.sarif" || true
              hadolint "$dockerfile" --format json > "hadolint-results/hadolint-${filename}.json" || true
            fi
          done <<< "${{ steps.find-dockerfiles.outputs.dockerfiles }}"
      
      - name: Merge Hadolint SARIF reports
        if: steps.find-dockerfiles.outputs.dockerfiles != ''
        run: |
          python3 -c "
          import json
          import os
          import glob
          
          merged_sarif = {
              'version': '2.1.0',
              'schema': 'https://json.schemastore.org/sarif-2.1.0.json',
              'runs': []
          }
          
          for sarif_file in glob.glob('hadolint-results/*.sarif'):
              try:
                  with open(sarif_file, 'r') as f:
                      data = json.load(f)
                      if 'runs' in data:
                          merged_sarif['runs'].extend(data['runs'])
              except json.JSONDecodeError:
                  print(f'Warning: Could not parse {sarif_file}')
                  continue
          
          with open('hadolint-merged.sarif', 'w') as f:
              json.dump(merged_sarif, f, indent=2)
          "
      
      - name: Upload Hadolint SARIF report
        if: always() && steps.find-dockerfiles.outputs.dockerfiles != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-merged.sarif
          category: hadolint
      
      - name: Archive Hadolint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-results-${{ github.run_number }}
          path: |
            hadolint-results/
            hadolint-merged.sarif
          retention-days: 30

  # Job 3: Container Security Scanning with Trivy
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Cache Trivy database for faster subsequent runs
      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/*.dockerfile', '**/Dockerfile') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-
      
      # Scan filesystem for vulnerabilities and misconfigurations
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs.sarif'
          # Scan for vulnerabilities, secrets, and misconfigurations
          scanners: 'vuln,secret,config'
          # Exit code 0 to not fail the job here, we'll evaluate later
          exit-code: '0'
          # Skip files that are not relevant for security scanning
          skip-files: '.git/,**/.git/,**/node_modules/**,**/.history/**'
      
      # Scan specific Dockerfile
      - name: Run Trivy Dockerfile scan
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'dockermaster/docker/compose/calibre-server/Dockerfile'
          format: 'sarif'
          output: 'trivy-dockerfile.sarif'
          exit-code: '0'
      
      # Scan docker-compose files for security issues
      - name: Run Trivy docker-compose scan
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'dockermaster/docker/compose'
          format: 'sarif'
          output: 'trivy-compose.sarif'
          exit-code: '0'
      
      - name: Upload Trivy filesystem SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-filesystem
      
      - name: Upload Trivy Dockerfile SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-dockerfile.sarif
          category: trivy-dockerfile
      
      - name: Upload Trivy docker-compose SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-compose.sarif
          category: trivy-docker-compose
      
      - name: Archive container scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-${{ github.run_number }}
          path: |
            trivy-fs.sarif
            trivy-dockerfile.sarif
            trivy-compose.sarif
          retention-days: 30

  # Job 4: Built Image Security Scanning
  built-image-scan:
    name: Scan Built Docker Images
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_built_images == 'true' || github.event.inputs.scan_built_images == null
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Find recently built images
        id: find-images
        run: |
          # Get list of images that might have been built
          IMAGES=""
          
          # Check for calibre-server (has Dockerfile)
          if [ -f "dockermaster/docker/compose/calibre-server/Dockerfile" ]; then
            IMAGES="$IMAGES ghcr.io/${{ env.IMAGE_PREFIX }}/calibre-server:latest"
          fi
          
          # Add other images that might be built
          # This list should match what's built in build-multi-type-images.yml
          POTENTIAL_IMAGES="
          ghcr.io/${{ env.IMAGE_PREFIX }}/calibre-server:latest
          "
          
          echo "Potential images to scan: $POTENTIAL_IMAGES"
          echo "images=$POTENTIAL_IMAGES" >> $GITHUB_OUTPUT
      
      - name: Scan built images with Trivy
        if: steps.find-images.outputs.images != ''
        run: |
          mkdir -p image-scan-results
          
          for image in ${{ steps.find-images.outputs.images }}; do
            if [ -n "$image" ]; then
              echo "Scanning $image"
              # Try to pull the image first
              if docker pull "$image" 2>/dev/null; then
                image_name=$(echo "$image" | sed 's|/|-|g' | sed 's|:|-|g')
                
                # Scan the image
                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                  -v "$PWD:/workspace" \
                  aquasec/trivy:latest image \
                  --format sarif \
                  --output "/workspace/image-scan-results/trivy-${image_name}.sarif" \
                  "$image" || true
                  
                # Also generate JSON for easier parsing
                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                  -v "$PWD:/workspace" \
                  aquasec/trivy:latest image \
                  --format json \
                  --output "/workspace/image-scan-results/trivy-${image_name}.json" \
                  "$image" || true
              else
                echo "Warning: Could not pull image $image - it may not exist or be accessible"
              fi
            fi
          done
      
      - name: Upload built image scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: built-image-scan-results-${{ github.run_number }}
          path: image-scan-results/
          retention-days: 30

  # Job 5: CodeQL Analysis for code security
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        # CodeQL supports: cpp, csharp, go, java, javascript, python, ruby, swift
        # Analyzing shell scripts and configuration files
        language: [ 'javascript' ] # Using JS for shell script analysis capabilities
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Cache CodeQL database for faster analysis
      - name: Cache CodeQL database
        uses: actions/cache@v4
        with:
          path: /home/runner/work/_temp/codeql_databases
          key: codeql-${{ runner.os }}-${{ matrix.language }}-${{ github.sha }}
          restore-keys: |
            codeql-${{ runner.os }}-${{ matrix.language }}-
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Override built-in queries with custom security-focused queries
          queries: +security-and-quality
          # Enable extended analysis for better coverage
          config: |
            paths-ignore:
              - '**/.git/**'
              - '**/node_modules/**'
              - '**/.history/**'
              - '**/.cache/**'
      
      # Autobuild attempts to build any compiled languages (none in this repo)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Job 6: Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'schedule' || github.event.inputs.full_scan == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Cache dependency databases
      - name: Cache dependency scan data
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/trivy
            ~/.npm/_cacache
            ~/.cache/pip
          key: deps-${{ runner.os }}-${{ hashFiles('**/package*.json', '**/requirements*.txt', '**/go.mod', '**/Gemfile*') }}
          restore-keys: |
            deps-${{ runner.os }}-
      
      # Since this repo doesn't have traditional dependencies,
      # we'll scan for vulnerable Docker base images and scripts
      - name: Run Trivy for known vulnerabilities in files
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'dependency-results.json'
          scanners: 'vuln'
          exit-code: '0'
          skip-files: '.git/,**/.git/,**/node_modules/**,**/.history/**'
      
      # Scan for license compliance in any dependencies
      - name: Run license scan
        run: |
          # Install and run licensee if any package files exist
          if find . -name "package.json" -o -name "requirements.txt" -o -name "go.mod" -o -name "Gemfile" | grep -q .; then
            echo "Found dependency files, scanning for license compliance..."
            # This would be where you'd add license scanning tools
            echo "License scanning would be performed here"
          else
            echo "No dependency files found, skipping license scan"
          fi
      
      - name: Archive dependency scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-results-${{ github.run_number }}
          path: dependency-results.json
          retention-days: 30

  # Job 7: Security Report Generation and PR Comments
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, dockerfile-lint, container-scan, built-image-scan, codeql-analysis]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results
      
      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: Generate comprehensive security summary
        id: security-summary
        run: |
          echo "## üîí Comprehensive Security Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "*Scan performed on $(date -u +'%Y-%m-%d %H:%M:%S UTC')*" >> security-summary.md
          echo "" >> security-summary.md
          
          # Initialize counters
          TOTAL_CRITICAL=0
          TOTAL_HIGH=0
          TOTAL_MEDIUM=0
          TOTAL_LOW=0
          
          # Process Gitleaks results
          echo "### üïµÔ∏è Secret Detection (Gitleaks)" >> security-summary.md
          GITLEAKS_FILE=$(find scan-results -name "gitleaks.sarif" | head -1)
          if [ -f "$GITLEAKS_FILE" ]; then
            GITLEAKS_COUNT=$(jq '.runs[0].results | length' "$GITLEAKS_FILE" 2>/dev/null || echo "0")
            if [ "$GITLEAKS_COUNT" -gt 0 ]; then
              echo "‚ùå **$GITLEAKS_COUNT potential secrets detected**" >> security-summary.md
              echo "Please review and resolve before merging." >> security-summary.md
              TOTAL_CRITICAL=$((TOTAL_CRITICAL + GITLEAKS_COUNT))
            else
              echo "‚úÖ No secrets detected" >> security-summary.md
            fi
          else
            echo "‚ö†Ô∏è Secret scan results not available" >> security-summary.md
          fi
          echo "" >> security-summary.md
          
          # Process Hadolint results
          echo "### üêã Dockerfile Security Linting (Hadolint)" >> security-summary.md
          HADOLINT_FILE=$(find scan-results -name "hadolint-merged.sarif" | head -1)
          if [ -f "$HADOLINT_FILE" ]; then
            HADOLINT_COUNT=$(jq '.runs[0].results | length' "$HADOLINT_FILE" 2>/dev/null || echo "0")
            if [ "$HADOLINT_COUNT" -gt 0 ]; then
              # Count by severity
              HADOLINT_ERROR=$(jq '[.runs[0].results[] | select(.level == "error")] | length' "$HADOLINT_FILE" 2>/dev/null || echo "0")
              HADOLINT_WARNING=$(jq '[.runs[0].results[] | select(.level == "warning")] | length' "$HADOLINT_FILE" 2>/dev/null || echo "0")
              HADOLINT_INFO=$(jq '[.runs[0].results[] | select(.level == "note")] | length' "$HADOLINT_FILE" 2>/dev/null || echo "0")
              
              echo "‚ö†Ô∏è **$HADOLINT_COUNT Dockerfile issues found**" >> security-summary.md
              echo "- Errors: $HADOLINT_ERROR" >> security-summary.md
              echo "- Warnings: $HADOLINT_WARNING" >> security-summary.md
              echo "- Info: $HADOLINT_INFO" >> security-summary.md
              
              TOTAL_HIGH=$((TOTAL_HIGH + HADOLINT_ERROR))
              TOTAL_MEDIUM=$((TOTAL_MEDIUM + HADOLINT_WARNING))
            else
              echo "‚úÖ No Dockerfile security issues detected" >> security-summary.md
            fi
          else
            echo "‚úÖ Dockerfile linting completed" >> security-summary.md
          fi
          echo "" >> security-summary.md
          
          # Process Trivy results
          echo "### üê≥ Container Security (Trivy)" >> security-summary.md
          TRIVY_FILES=$(find scan-results -name "trivy-*.sarif" | grep -v merged)
          if [ -n "$TRIVY_FILES" ]; then
            TOTAL_TRIVY=0
            for trivy_file in $TRIVY_FILES; do
              COUNT=$(jq '.runs[0].results | length' "$trivy_file" 2>/dev/null || echo "0")
              TOTAL_TRIVY=$((TOTAL_TRIVY + COUNT))
            done
            
            if [ "$TOTAL_TRIVY" -gt 0 ]; then
              echo "‚ö†Ô∏è **$TOTAL_TRIVY security issues found in containers/configurations**" >> security-summary.md
              TOTAL_MEDIUM=$((TOTAL_MEDIUM + TOTAL_TRIVY))
            else
              echo "‚úÖ No container security issues detected" >> security-summary.md
            fi
          else
            echo "‚úÖ Container scan completed successfully" >> security-summary.md
          fi
          echo "" >> security-summary.md
          
          # Process built image scan results
          echo "### üì¶ Built Image Security" >> security-summary.md
          IMAGE_SCAN_FILES=$(find scan-results -path "*built-image-scan-results*" -name "*.json" 2>/dev/null || true)
          if [ -n "$IMAGE_SCAN_FILES" ]; then
            TOTAL_IMAGE_ISSUES=0
            for image_file in $IMAGE_SCAN_FILES; do
              if [ -f "$image_file" ]; then
                VULN_COUNT=$(jq '.Results[]?.Vulnerabilities // [] | length' "$image_file" 2>/dev/null || echo "0")
                TOTAL_IMAGE_ISSUES=$((TOTAL_IMAGE_ISSUES + VULN_COUNT))
              fi
            done
            
            if [ "$TOTAL_IMAGE_ISSUES" -gt 0 ]; then
              echo "‚ö†Ô∏è **$TOTAL_IMAGE_ISSUES vulnerabilities found in built images**" >> security-summary.md
              TOTAL_HIGH=$((TOTAL_HIGH + TOTAL_IMAGE_ISSUES))
            else
              echo "‚úÖ No vulnerabilities found in built images" >> security-summary.md
            fi
          else
            echo "‚ÑπÔ∏è Built image scanning skipped or no images found" >> security-summary.md
          fi
          echo "" >> security-summary.md
          
          # Add CodeQL status
          echo "### üîç Code Analysis (CodeQL)" >> security-summary.md
          echo "‚úÖ CodeQL analysis completed - check Security tab for detailed results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Security summary
          echo "### üìä Security Summary" >> security-summary.md
          TOTAL_ISSUES=$((TOTAL_CRITICAL + TOTAL_HIGH + TOTAL_MEDIUM + TOTAL_LOW))
          if [ "$TOTAL_ISSUES" -gt 0 ]; then
            echo "**Total Issues Found: $TOTAL_ISSUES**" >> security-summary.md
            echo "- Critical: $TOTAL_CRITICAL" >> security-summary.md
            echo "- High: $TOTAL_HIGH" >> security-summary.md
            echo "- Medium: $TOTAL_MEDIUM" >> security-summary.md
            echo "- Low: $TOTAL_LOW" >> security-summary.md
            echo "" >> security-summary.md
            
            if [ "$TOTAL_CRITICAL" -gt 0 ]; then
              echo "üö® **CRITICAL ISSUES MUST BE RESOLVED BEFORE MERGE**" >> security-summary.md
            elif [ "$TOTAL_HIGH" -gt 10 ]; then
              echo "‚ö†Ô∏è **Consider resolving high-priority issues before merge**" >> security-summary.md
            fi
          else
            echo "üéâ **No security issues detected!**" >> security-summary.md
          fi
          echo "" >> security-summary.md
          
          # Add links to security features
          echo "### üîó Detailed Results" >> security-summary.md
          echo "- [Security Overview](https://github.com/${{ github.repository }}/security)" >> security-summary.md
          echo "- [Code Scanning Alerts](https://github.com/${{ github.repository }}/security/code-scanning)" >> security-summary.md
          echo "- [Secret Scanning](https://github.com/${{ github.repository }}/security/secret-scanning)" >> security-summary.md
          echo "- [Dependabot Alerts](https://github.com/${{ github.repository }}/security/dependabot)" >> security-summary.md
          echo "" >> security-summary.md
          
          # Set output for use in PR comment and security gate
          {
            echo 'security_report<<EOF'
            cat security-summary.md
            echo EOF
          } >> $GITHUB_OUTPUT
          
          echo "total_critical=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "total_high=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
      
      - name: Comment security results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const securityReport = `${{ steps.security-summary.outputs.security_report }}`;
            const totalCritical = parseInt('${{ steps.security-summary.outputs.total_critical }}') || 0;
            const totalHigh = parseInt('${{ steps.security-summary.outputs.total_high }}') || 0;
            
            // Find existing security comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('üîí Comprehensive Security Scan Results')
            );
            
            // Add status check indicator based on results
            let statusIndicator = '';
            if (totalCritical > 0) {
              statusIndicator = 'üö® **SECURITY GATE: BLOCKED** - Critical issues must be resolved\n\n';
            } else if (totalHigh > 10) {
              statusIndicator = '‚ö†Ô∏è **SECURITY GATE: WARNING** - Consider resolving high-priority issues\n\n';
            } else {
              statusIndicator = '‚úÖ **SECURITY GATE: PASSED** - No critical security issues found\n\n';
            }
            
            const finalReport = statusIndicator + securityReport;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: finalReport
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: finalReport
              });
            }

  # Job 8: Security Gate - Fail on Critical Issues
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [secret-scan, dockerfile-lint, container-scan, built-image-scan, codeql-analysis, security-report]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results
      
      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: Evaluate security findings
        run: |
          echo "üîç Evaluating security scan results..."
          EXIT_CODE=0
          CRITICAL_ISSUES=0
          HIGH_ISSUES=0
          
          # Check for secrets (CRITICAL - always fail)
          GITLEAKS_FILE=$(find scan-results -name "gitleaks.sarif" | head -1)
          if [ -f "$GITLEAKS_FILE" ]; then
            SECRET_COUNT=$(jq '.runs[0].results | length' "$GITLEAKS_FILE" 2>/dev/null || echo "0")
            if [ "$SECRET_COUNT" -gt 0 ]; then
              echo "‚ùå CRITICAL: $SECRET_COUNT potential secrets detected"
              CRITICAL_ISSUES=$((CRITICAL_ISSUES + SECRET_COUNT))
              EXIT_CODE=1
            fi
          fi
          
          # Check for critical Dockerfile issues
          HADOLINT_FILE=$(find scan-results -name "hadolint-merged.sarif" | head -1)
          if [ -f "$HADOLINT_FILE" ]; then
            HADOLINT_CRITICAL=$(jq '[.runs[0].results[] | select(.level == "error")] | length' "$HADOLINT_FILE" 2>/dev/null || echo "0")
            if [ "$HADOLINT_CRITICAL" -gt 0 ]; then
              echo "‚ö†Ô∏è HIGH: $HADOLINT_CRITICAL critical Dockerfile issues found"
              HIGH_ISSUES=$((HIGH_ISSUES + HADOLINT_CRITICAL))
              # Uncomment to fail on critical Dockerfile issues
              # EXIT_CODE=1
            fi
          fi
          
          # Check for critical/high severity container issues
          TRIVY_FILES=$(find scan-results -name "trivy-*.sarif" | grep -v merged)
          if [ -n "$TRIVY_FILES" ]; then
            TOTAL_HIGH_VULN=0
            for trivy_file in $TRIVY_FILES; do
              HIGH_VULN=$(jq '[.runs[0].results[] | select(.level == "error")] | length' "$trivy_file" 2>/dev/null || echo "0")
              TOTAL_HIGH_VULN=$((TOTAL_HIGH_VULN + HIGH_VULN))
            done
            
            if [ "$TOTAL_HIGH_VULN" -gt 0 ]; then
              echo "‚ö†Ô∏è HIGH: $TOTAL_HIGH_VULN high-severity container vulnerabilities found"
              HIGH_ISSUES=$((HIGH_ISSUES + TOTAL_HIGH_VULN))
              
              # Fail if more than 5 high-severity vulnerabilities
              if [ "$TOTAL_HIGH_VULN" -gt 5 ]; then
                echo "‚ùå CRITICAL: Too many high-severity vulnerabilities ($TOTAL_HIGH_VULN > 5)"
                EXIT_CODE=1
              fi
            fi
          fi
          
          # Check built image vulnerabilities
          IMAGE_SCAN_FILES=$(find scan-results -path "*built-image-scan-results*" -name "*.json" 2>/dev/null || true)
          if [ -n "$IMAGE_SCAN_FILES" ]; then
            TOTAL_IMAGE_HIGH=0
            for image_file in $IMAGE_SCAN_FILES; do
              if [ -f "$image_file" ]; then
                HIGH_VULN=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' "$image_file" 2>/dev/null || echo "0")
                TOTAL_IMAGE_HIGH=$((TOTAL_IMAGE_HIGH + HIGH_VULN))
              fi
            done
            
            if [ "$TOTAL_IMAGE_HIGH" -gt 0 ]; then
              echo "‚ö†Ô∏è HIGH: $TOTAL_IMAGE_HIGH high/critical vulnerabilities in built images"
              HIGH_ISSUES=$((HIGH_ISSUES + TOTAL_IMAGE_HIGH))
              
              # Fail if more than 3 critical vulnerabilities in images
              if [ "$TOTAL_IMAGE_HIGH" -gt 3 ]; then
                echo "‚ùå CRITICAL: Too many high/critical vulnerabilities in images ($TOTAL_IMAGE_HIGH > 3)"
                EXIT_CODE=1
              fi
            fi
          fi
          
          # Summary
          echo "\nüìä Security Gate Summary:"
          echo "- Critical Issues: $CRITICAL_ISSUES"
          echo "- High Issues: $HIGH_ISSUES"
          echo "- Total Issues Evaluated: $((CRITICAL_ISSUES + HIGH_ISSUES))"
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "\n‚úÖ Security gate passed - no critical blocking issues found"
            if [ "$HIGH_ISSUES" -gt 0 ]; then
              echo "‚ö†Ô∏è  Note: $HIGH_ISSUES high-priority issues found but within acceptable limits"
            fi
          else
            echo "\n‚ùå Security gate failed - critical security issues must be resolved before merge"
            echo "\nBlocking issues:"
            if [ "$CRITICAL_ISSUES" -gt 0 ]; then
              echo "- $CRITICAL_ISSUES critical issues (secrets, etc.)"
            fi
            if [ $((HIGH_ISSUES)) -gt 10 ]; then  # Only show if excessive high issues
              echo "- Excessive high-priority vulnerabilities detected"
            fi
          fi
          
          exit $EXIT_CODE
      
      - name: Upload security gate results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-gate-results-${{ github.run_number }}
          path: security-gate-summary.txt
          retention-days: 90

  # Job 9: Performance Monitoring and Cleanup
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [secret-scan, dockerfile-lint, container-scan, built-image-scan, codeql-analysis, security-gate]
    if: always()
    steps:
      - name: Calculate performance metrics
        run: |
          echo "## üöÄ Security Scan Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dockerfile Linting: ${{ needs.dockerfile-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Built Image Scan: ${{ needs.built-image-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Gate: ${{ needs.security-gate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Calculate cache effectiveness (placeholder - would need actual metrics)
          echo "### üíæ Cache Effectiveness" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy DB Cache: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- Gitleaks Cache: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL Cache: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Tab](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
          echo "- [Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          echo "- [Code Scanning](https://github.com/${{ github.repository }}/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
      
      - name: Cleanup old artifacts
        if: github.event_name == 'schedule'
        run: |
          echo "üßπ Cleanup would be performed here for scheduled runs"
          echo "This could include removing old scan artifacts, clearing caches, etc."

  # Job 10: Notification and Integration
  notification:
    name: Notification & Integration
    runs-on: ubuntu-latest
    needs: [secret-scan, dockerfile-lint, container-scan, built-image-scan, codeql-analysis, security-gate]
    if: always() && (github.event_name == 'schedule' || needs.security-gate.result == 'failure')
    steps:
      - name: Send notification on issues
        if: needs.security-gate.result == 'failure'
        run: |
          echo "üö® Security scan found critical issues!"
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "Please check the GitHub Security tab for details:"
          echo "https://github.com/${{ github.repository }}/security"
          echo ""
          echo "Direct link to this run:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Integration endpoints (uncomment and configure as needed)
          # Slack integration
          # if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
          #   curl -X POST -H 'Content-type: application/json' \
          #     --data '{"text":"üö® Security issues found in ${{ github.repository }}\nScan: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          #     ${{ secrets.SLACK_WEBHOOK }}
          # fi
          
          # Teams integration
          # if [ -n "${{ secrets.TEAMS_WEBHOOK }}" ]; then
          #   curl -X POST -H 'Content-type: application/json' \
          #     --data '{"text":"üö® Security issues found in ${{ github.repository }}"}' \
          #     ${{ secrets.TEAMS_WEBHOOK }}
          # fi
          
          # Email integration (using a service like SendGrid)
          # if [ -n "${{ secrets.SENDGRID_API_KEY }}" ]; then
          #   # Send email notification
          #   echo "Email notification would be sent here"
          # fi
      
      - name: Update external security dashboard
        if: always()
        run: |
          echo "üìä External dashboard integration would be performed here"
          echo "This could update:"
          echo "- Security dashboards"
          echo "- Compliance tracking systems"
          echo "- Issue tracking systems"
          echo "- Metrics collection systems"
          
      - name: Generate security badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Generate security status badge data
          if [ "${{ needs.security-gate.result }}" = "success" ]; then
            BADGE_STATUS="passing"
            BADGE_COLOR="brightgreen"
          else
            BADGE_STATUS="failing"
            BADGE_COLOR="red"
          fi
          
          echo "Security Status Badge: $BADGE_STATUS"
          echo "Badge Color: $BADGE_COLOR"
          
          # Could integrate with shields.io or similar service
          # curl -X POST "https://your-badge-service.com/update" \
          #   -d "{\"repo\": \"${{ github.repository }}\", \"status\": \"$BADGE_STATUS\", \"color\": \"$BADGE_COLOR\"}"