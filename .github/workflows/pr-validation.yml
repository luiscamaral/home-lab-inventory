# Comprehensive Pull Request Validation Workflow
# This workflow provides thorough validation of pull requests including linting,
# pre-commit hooks, commit message validation, Docker builds, documentation,
# and file structure validation with detailed PR comments and status reporting

name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel in-progress runs for the same PR
concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

# Environment variables
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

# Define permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  # Job 1: Lint Validation - Matrix job for parallel execution
  lint-validation:
    name: Lint Validation (${{ matrix.linter }})
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        linter:
          - markdown
          - yaml
          - shell
          - json
          - actionlint
    outputs:
      markdown-result: ${{ steps.markdown.outputs.result }}
      yaml-result: ${{ steps.yaml.outputs.result }}
      shell-result: ${{ steps.shell.outputs.result }}
      json-result: ${{ steps.json.outputs.result }}
      actionlint-result: ${{ steps.actionlint.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache for various linting tools
      - name: Cache linting tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/markdownlint
            ~/.cache/yamllint
            ~/.cache/shellcheck
            ~/.cache/actionlint
          key: lint-tools-${{ runner.os }}-${{ matrix.linter }}-${{ hashFiles('**/.markdownlint.json', '**/.yamllint.yml') }}
          restore-keys: |
            lint-tools-${{ runner.os }}-${{ matrix.linter }}-

      # Install Python for yamllint and other tools
      - name: Set up Python
        if: matrix.linter == 'yaml' || matrix.linter == 'json'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Install Node.js for markdownlint
      - name: Set up Node.js
        if: matrix.linter == 'markdown'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Markdown linting
      - name: Run markdownlint
        if: matrix.linter == 'markdown'
        id: markdown
        run: |
          npm install -g markdownlint-cli
          echo "Running markdownlint..."
          if markdownlint --config .markdownlint.json **/*.md --ignore .history --ignore node_modules; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Markdown linting passed"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Markdown linting failed"
            exit 1
          fi

      # YAML linting
      - name: Run yamllint
        if: matrix.linter == 'yaml'
        id: yaml
        run: |
          pip install yamllint
          echo "Running yamllint..."
          if yamllint -c .yamllint.yml .; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ YAML linting passed"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå YAML linting failed"
            exit 1
          fi

      # Shell script linting
      - name: Run shellcheck
        if: matrix.linter == 'shell'
        id: shell
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          echo "Running shellcheck on shell scripts..."
          SHELL_FILES=$(find . -name "*.sh" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.history/*")
          if [ -n "$SHELL_FILES" ]; then
            if echo "$SHELL_FILES" | xargs shellcheck -e SC1091 -e SC2034 -e SC2154; then
              echo "result=success" >> $GITHUB_OUTPUT
              echo "‚úÖ Shell script linting passed"
            else
              echo "result=failure" >> $GITHUB_OUTPUT
              echo "‚ùå Shell script linting failed"
              exit 1
            fi
          else
            echo "result=skipped" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No shell scripts found to lint"
          fi

      # JSON validation
      - name: Validate JSON files
        if: matrix.linter == 'json'
        id: json
        run: |
          echo "Validating JSON files..."
          JSON_FILES=$(find . -name "*.json" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.history/*")
          VALIDATION_FAILED=false
          
          for file in $JSON_FILES; do
            if ! python -m json.tool "$file" > /dev/null 2>&1; then
              echo "‚ùå Invalid JSON: $file"
              VALIDATION_FAILED=true
            else
              echo "‚úÖ Valid JSON: $file"
            fi
          done
          
          if [ "$VALIDATION_FAILED" = false ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ JSON validation passed"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå JSON validation failed"
            exit 1
          fi

      # GitHub Actions workflow linting
      - name: Run actionlint
        if: matrix.linter == 'actionlint'
        id: actionlint
        run: |
          # Install actionlint
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          
          echo "Running actionlint on GitHub workflows..."
          if ./actionlint .github/workflows/*.yml; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ GitHub Actions linting passed"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå GitHub Actions linting failed"
            exit 1
          fi

  # Job 2: Pre-commit Hook Validation
  pre-commit-validation:
    name: Pre-commit Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Cache pre-commit environments
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('**/.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install pre-commit
        run: |
          pip install pre-commit
          pre-commit install

      - name: Run pre-commit hooks
        id: pre-commit
        run: |
          echo "Running all pre-commit hooks..."
          if pre-commit run --all-files --show-diff-on-failure; then
            echo "‚úÖ All pre-commit hooks passed"
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some pre-commit hooks failed"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Generate pre-commit report
        if: always()
        run: |
          echo "### üîß Pre-commit Validation Results" > pre-commit-report.md
          echo "" >> pre-commit-report.md
          if [ "${{ steps.pre-commit.outputs.result }}" = "success" ]; then
            echo "‚úÖ **All pre-commit hooks passed successfully**" >> pre-commit-report.md
            echo "" >> pre-commit-report.md
            echo "All configured hooks executed without issues:" >> pre-commit-report.md
            echo "- File formatting and cleanup" >> pre-commit-report.md
            echo "- JSON/YAML syntax checking" >> pre-commit-report.md
            echo "- Markdown and YAML linting" >> pre-commit-report.md
            echo "- Dockerfile linting with hadolint" >> pre-commit-report.md
            echo "- Shell script validation with shellcheck" >> pre-commit-report.md
            echo "- Secret detection with gitleaks" >> pre-commit-report.md
            echo "- Docker Compose validation" >> pre-commit-report.md
          else
            echo "‚ùå **Some pre-commit hooks failed**" >> pre-commit-report.md
            echo "" >> pre-commit-report.md
            echo "Please run \`pre-commit run --all-files\` locally to fix issues." >> pre-commit-report.md
          fi

      - name: Upload pre-commit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pre-commit-report
          path: pre-commit-report.md
          retention-days: 7

  # Job 3: Commit Message Validation
  commit-validation:
    name: Commit Message Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Cache commitlint
        uses: actions/cache@v4
        with:
          path: ~/.npm/_cacache
          key: commitlint-${{ runner.os }}-${{ hashFiles('**/.commitlintrc.json', '**/package.json') }}
          restore-keys: |
            commitlint-${{ runner.os }}-

      - name: Validate commit messages
        id: commitlint
        run: |
          echo "Validating commit messages in PR..."
          
          # Get the base branch commit
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          echo "Checking commits from $BASE_SHA to $HEAD_SHA"
          
          # Get commit messages
          COMMITS=$(git log --format="%H %s" "$BASE_SHA".."$HEAD_SHA")
          
          if [ -z "$COMMITS" ]; then
            echo "No commits found to validate"
            echo "result=skipped" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          FAILED_COMMITS=""
          TOTAL_COMMITS=0
          FAILED_COUNT=0
          
          while IFS= read -r commit_line; do
            if [ -n "$commit_line" ]; then
              COMMIT_SHA=$(echo "$commit_line" | cut -d' ' -f1)
              TOTAL_COMMITS=$((TOTAL_COMMITS + 1))
              
              echo "Validating commit: $COMMIT_SHA"
              
              if ! git log --format="%s%n%n%b" -n 1 "$COMMIT_SHA" | npx commitlint; then
                FAILED_COUNT=$((FAILED_COUNT + 1))
                COMMIT_MSG=$(git log --format="%s" -n 1 "$COMMIT_SHA")
                FAILED_COMMITS="${FAILED_COMMITS}\n- $COMMIT_SHA: $COMMIT_MSG"
                echo "‚ùå Failed: $COMMIT_SHA"
              else
                echo "‚úÖ Passed: $COMMIT_SHA"
              fi
            fi
          done <<< "$COMMITS"
          
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          
          if [ $FAILED_COUNT -eq 0 ]; then
            echo "‚úÖ All $TOTAL_COMMITS commit messages are valid"
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå $FAILED_COUNT out of $TOTAL_COMMITS commit messages failed validation"
            echo -e "Failed commits:$FAILED_COMMITS"
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "failed_commits<<EOF" >> $GITHUB_OUTPUT
            echo -e "$FAILED_COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Generate commit validation report
        if: always()
        run: |
          echo "### üìù Commit Message Validation" > commit-report.md
          echo "" >> commit-report.md
          
          if [ "${{ steps.commitlint.outputs.result }}" = "success" ]; then
            echo "‚úÖ **All commit messages follow conventional format**" >> commit-report.md
            echo "" >> commit-report.md
            echo "**Validated:** ${{ steps.commitlint.outputs.total_commits }} commits" >> commit-report.md
          elif [ "${{ steps.commitlint.outputs.result }}" = "skipped" ]; then
            echo "‚ÑπÔ∏è **No commits to validate**" >> commit-report.md
          else
            echo "‚ùå **Commit message validation failed**" >> commit-report.md
            echo "" >> commit-report.md
            echo "**Failed:** ${{ steps.commitlint.outputs.failed_count }} out of ${{ steps.commitlint.outputs.total_commits }} commits" >> commit-report.md
            echo "" >> commit-report.md
            echo "**Failed commits:**" >> commit-report.md
            echo "${{ steps.commitlint.outputs.failed_commits }}" >> commit-report.md
            echo "" >> commit-report.md
            echo "**How to fix:**" >> commit-report.md
            echo "1. Use conventional commit format: \`type(scope): description\`" >> commit-report.md
            echo "2. Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, security" >> commit-report.md
            echo "3. Use \`git commit --amend\` to fix the last commit or \`git rebase -i\` for older commits" >> commit-report.md
            echo "4. See [Conventional Commits](https://conventionalcommits.org/) for details" >> commit-report.md
          fi

      - name: Upload commit validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: commit-validation-report
          path: commit-report.md
          retention-days: 7

  # Job 4: Docker Build Validation
  docker-build-validation:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-validation-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-validation-${{ runner.os }}-

      - name: Find changed Dockerfiles
        id: find-dockerfiles
        run: |
          # Get changed files in the PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Find changed Dockerfiles
          CHANGED_DOCKERFILES=$(git diff --name-only "$BASE_SHA".."$HEAD_SHA" | grep -E "(Dockerfile|\.dockerfile)$" || true)
          
          # Also find all Dockerfiles if docker-compose or workflow files changed
          OTHER_CHANGES=$(git diff --name-only "$BASE_SHA".."$HEAD_SHA" | grep -E "(docker-compose\.ya?ml|\.github/workflows/)" || true)
          
          if [ -n "$OTHER_CHANGES" ]; then
            echo "Docker-related files changed, checking all Dockerfiles"
            ALL_DOCKERFILES=$(find . -name "Dockerfile" -o -name "*.dockerfile" | grep -v node_modules | grep -v .git || true)
            CHANGED_DOCKERFILES="$CHANGED_DOCKERFILES $ALL_DOCKERFILES"
          fi
          
          # Remove duplicates and empty lines
          DOCKERFILES=$(echo "$CHANGED_DOCKERFILES" | tr ' ' '\n' | sort -u | grep -v '^$' || true)
          
          echo "Found Dockerfiles to validate:"
          echo "$DOCKERFILES"
          
          if [ -n "$DOCKERFILES" ]; then
            echo "has_dockerfiles=true" >> $GITHUB_OUTPUT
            echo "dockerfiles<<EOF" >> $GITHUB_OUTPUT
            echo "$DOCKERFILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_dockerfiles=false" >> $GITHUB_OUTPUT
            echo "No Dockerfiles found to validate"
          fi

      - name: Validate Docker builds
        if: steps.find-dockerfiles.outputs.has_dockerfiles == 'true'
        id: docker-validation
        run: |
          echo "### Docker Build Validation Results" > docker-report.md
          echo "" >> docker-report.md
          
          BUILD_FAILED=false
          TOTAL_BUILDS=0
          FAILED_BUILDS=0
          SUCCESSFUL_BUILDS=""
          FAILED_BUILDS_LIST=""
          
          while IFS= read -r dockerfile; do
            if [ -n "$dockerfile" ] && [ -f "$dockerfile" ]; then
              TOTAL_BUILDS=$((TOTAL_BUILDS + 1))
              
              echo "Validating build for: $dockerfile"
              CONTEXT_DIR=$(dirname "$dockerfile")
              IMAGE_NAME=$(basename "$CONTEXT_DIR")
              
              # Build without pushing, just validate
              if docker buildx build \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
                --platform linux/amd64 \
                --tag "validation-$IMAGE_NAME:test" \
                --file "$dockerfile" \
                "$CONTEXT_DIR"; then
                  
                echo "‚úÖ Build successful: $dockerfile"
                SUCCESSFUL_BUILDS="$SUCCESSFUL_BUILDS\n- ‚úÖ $dockerfile"
              else
                echo "‚ùå Build failed: $dockerfile"
                BUILD_FAILED=true
                FAILED_BUILDS=$((FAILED_BUILDS + 1))
                FAILED_BUILDS_LIST="$FAILED_BUILDS_LIST\n- ‚ùå $dockerfile"
              fi
            fi
          done <<< "${{ steps.find-dockerfiles.outputs.dockerfiles }}"
          
          # Move cache
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
          
          # Generate report
          if [ $FAILED_BUILDS -eq 0 ]; then
            echo "‚úÖ **All Docker builds passed validation**" >> docker-report.md
            echo "" >> docker-report.md
            echo "**Successfully validated:** $TOTAL_BUILDS builds" >> docker-report.md
            echo "" >> docker-report.md
            echo "**Builds tested:**" >> docker-report.md
            echo -e "$SUCCESSFUL_BUILDS" >> docker-report.md
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå **Docker build validation failed**" >> docker-report.md
            echo "" >> docker-report.md
            echo "**Failed:** $FAILED_BUILDS out of $TOTAL_BUILDS builds" >> docker-report.md
            echo "" >> docker-report.md
            echo "**Failed builds:**" >> docker-report.md
            echo -e "$FAILED_BUILDS_LIST" >> docker-report.md
            if [ -n "$SUCCESSFUL_BUILDS" ]; then
              echo "" >> docker-report.md
              echo "**Successful builds:**" >> docker-report.md
              echo -e "$SUCCESSFUL_BUILDS" >> docker-report.md
            fi
            echo "result=failure" >> $GITHUB_OUTPUT
            BUILD_FAILED=true
          fi
          
          echo "total_builds=$TOTAL_BUILDS" >> $GITHUB_OUTPUT
          echo "failed_builds=$FAILED_BUILDS" >> $GITHUB_OUTPUT
          
          if [ "$BUILD_FAILED" = true ]; then
            exit 1
          fi

      - name: Generate Docker validation report
        if: steps.find-dockerfiles.outputs.has_dockerfiles == 'false'
        run: |
          echo "### üê≥ Docker Build Validation" > docker-report.md
          echo "" >> docker-report.md
          echo "‚ÑπÔ∏è **No Dockerfiles changed in this PR**" >> docker-report.md
          echo "" >> docker-report.md
          echo "Docker build validation was skipped as no Dockerfile changes were detected." >> docker-report.md

      - name: Upload Docker validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-validation-report
          path: docker-report.md
          retention-days: 7

  # Job 5: Documentation Validation
  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check documentation requirements
        id: docs-check
        run: |
          echo "Checking documentation requirements..."
          
          # Check if README exists
          if [ ! -f "README.md" ]; then
            echo "‚ùå README.md is missing"
            echo "readme_exists=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ README.md exists"
            echo "readme_exists=true" >> $GITHUB_OUTPUT
          fi
          
          # Check if CLAUDE.md is properly maintained
          if [ ! -f "CLAUDE.md" ]; then
            echo "‚ùå CLAUDE.md is missing"
            echo "claude_docs_exists=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ CLAUDE.md exists"
            echo "claude_docs_exists=true" >> $GITHUB_OUTPUT
          fi
          
          # Check if commit conventions are documented
          if [ ! -f "COMMIT_CONVENTIONS.md" ]; then
            echo "‚ùå COMMIT_CONVENTIONS.md is missing"
            echo "commit_docs_exists=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ COMMIT_CONVENTIONS.md exists"
            echo "commit_docs_exists=true" >> $GITHUB_OUTPUT
          fi
          
          # Check inventory files
          INVENTORY_FILES="inventory/servers.md inventory/virtual-machines.md inventory/docker-containers.md inventory/commands-available.md"
          MISSING_INVENTORY=""
          
          for file in $INVENTORY_FILES; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing inventory file: $file"
              MISSING_INVENTORY="$MISSING_INVENTORY $file"
            else
              echo "‚úÖ Inventory file exists: $file"
            fi
          done
          
          if [ -n "$MISSING_INVENTORY" ]; then
            echo "missing_inventory=$MISSING_INVENTORY" >> $GITHUB_OUTPUT
            echo "inventory_complete=false" >> $GITHUB_OUTPUT
          else
            echo "inventory_complete=true" >> $GITHUB_OUTPUT
          fi
          
          # Check if documentation is up to date (basic check)
          DOCS_OUTDATED=""
          
          # Check if any configuration files were changed without updating docs
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          CONFIG_CHANGES=$(git diff --name-only "$BASE_SHA".."$HEAD_SHA" | grep -E "\.(json|ya?ml|toml|conf|ini)$" | grep -v node_modules || true)
          DOC_CHANGES=$(git diff --name-only "$BASE_SHA".."$HEAD_SHA" | grep -E "\.md$" || true)
          
          if [ -n "$CONFIG_CHANGES" ] && [ -z "$DOC_CHANGES" ]; then
            echo "‚ö†Ô∏è Configuration files changed but no documentation updates found"
            echo "docs_may_need_update=true" >> $GITHUB_OUTPUT
            DOCS_OUTDATED="Configuration files changed: $CONFIG_CHANGES"
          else
            echo "docs_may_need_update=false" >> $GITHUB_OUTPUT
          fi
          
          echo "outdated_reason=$DOCS_OUTDATED" >> $GITHUB_OUTPUT

      - name: Generate documentation report
        if: always()
        run: |
          echo "### üìö Documentation Validation" > docs-report.md
          echo "" >> docs-report.md
          
          ISSUES_FOUND=false
          
          # README check
          if [ "${{ steps.docs-check.outputs.readme_exists }}" = "false" ]; then
            echo "‚ùå **README.md is missing**" >> docs-report.md
            echo "A README.md file is required to describe the project." >> docs-report.md
            echo "" >> docs-report.md
            ISSUES_FOUND=true
          else
            echo "‚úÖ README.md exists" >> docs-report.md
          fi
          
          # CLAUDE.md check
          if [ "${{ steps.docs-check.outputs.claude_docs_exists }}" = "false" ]; then
            echo "‚ùå **CLAUDE.md is missing**" >> docs-report.md
            echo "CLAUDE.md contains important project instructions." >> docs-report.md
            echo "" >> docs-report.md
            ISSUES_FOUND=true
          else
            echo "‚úÖ CLAUDE.md exists" >> docs-report.md
          fi
          
          # Commit conventions check
          if [ "${{ steps.docs-check.outputs.commit_docs_exists }}" = "false" ]; then
            echo "‚ùå **COMMIT_CONVENTIONS.md is missing**" >> docs-report.md
            echo "Commit conventions should be documented for contributors." >> docs-report.md
            echo "" >> docs-report.md
            ISSUES_FOUND=true
          else
            echo "‚úÖ COMMIT_CONVENTIONS.md exists" >> docs-report.md
          fi
          
          # Inventory files check
          if [ "${{ steps.docs-check.outputs.inventory_complete }}" = "false" ]; then
            echo "‚ùå **Some inventory files are missing**" >> docs-report.md
            echo "Missing files: ${{ steps.docs-check.outputs.missing_inventory }}" >> docs-report.md
            echo "" >> docs-report.md
            ISSUES_FOUND=true
          else
            echo "‚úÖ All inventory documentation files exist" >> docs-report.md
          fi
          
          # Documentation currency check
          if [ "${{ steps.docs-check.outputs.docs_may_need_update }}" = "true" ]; then
            echo "‚ö†Ô∏è **Documentation may need updates**" >> docs-report.md
            echo "${{ steps.docs-check.outputs.outdated_reason }}" >> docs-report.md
            echo "Consider updating relevant documentation when configuration changes." >> docs-report.md
            echo "" >> docs-report.md
          fi
          
          if [ "$ISSUES_FOUND" = false ]; then
            echo "" >> docs-report.md
            echo "üéâ **All documentation requirements are met!**" >> docs-report.md
          fi

      - name: Upload documentation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-report
          path: docs-report.md
          retention-days: 7

  # Job 6: File Structure Validation
  file-structure-validation:
    name: File Structure Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate file structure
        id: structure-check
        run: |
          echo "Validating repository file structure..."
          
          ISSUES=""
          STRUCTURE_VALID=true
          
          # Check required configuration files
          REQUIRED_CONFIG_FILES=(
            ".gitignore"
            ".commitlintrc.json"
            ".pre-commit-config.yaml"
            ".markdownlint.json"
            ".yamllint.yml"
            ".gitleaks.toml"
            "package.json"
          )
          
          for file in "${REQUIRED_CONFIG_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required config file: $file"
              ISSUES="$ISSUES\n- Missing: $file"
              STRUCTURE_VALID=false
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          # Check required directories
          REQUIRED_DIRS=(
            ".github/workflows"
            "inventory"
          )
          
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing required directory: $dir"
              ISSUES="$ISSUES\n- Missing directory: $dir"
              STRUCTURE_VALID=false
            else
              echo "‚úÖ Found directory: $dir"
            fi
          done
          
          # Check GitHub workflows
          WORKFLOW_FILES=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null || true)
          if [ -z "$WORKFLOW_FILES" ]; then
            echo "‚ùå No GitHub workflow files found"
            ISSUES="$ISSUES\n- No GitHub workflows found"
            STRUCTURE_VALID=false
          else
            WORKFLOW_COUNT=$(echo "$WORKFLOW_FILES" | wc -l)
            echo "‚úÖ Found $WORKFLOW_COUNT GitHub workflows"
          fi
          
          # Check for common problematic files
          PROBLEMATIC_PATTERNS=(
            "*.tmp"
            "*.log"
            ".DS_Store"
            "Thumbs.db"
            "*.swp"
            "*.swo"
          )
          
          for pattern in "${PROBLEMATIC_PATTERNS[@]}"; do
            FOUND_FILES=$(find . -name "$pattern" -not -path "./.git/*" 2>/dev/null || true)
            if [ -n "$FOUND_FILES" ]; then
              echo "‚ö†Ô∏è Found potentially problematic files matching $pattern"
              ISSUES="$ISSUES\n- Found $pattern files (should be in .gitignore)"
            fi
          done
          
          # Check for large files
          LARGE_FILES=$(find . -type f -size +1M -not -path "./.git/*" -not -path "./node_modules/*" 2>/dev/null || true)
          if [ -n "$LARGE_FILES" ]; then
            echo "‚ö†Ô∏è Found large files (>1MB):"
            echo "$LARGE_FILES" | while read -r file; do
              SIZE=$(ls -lh "$file" | awk '{print $5}')
              echo "  - $file ($SIZE)"
            done
            ISSUES="$ISSUES\n- Large files found (consider Git LFS)"
          fi
          
          if [ "$STRUCTURE_VALID" = true ]; then
            echo "‚úÖ File structure validation passed"
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå File structure validation failed"
            echo "result=failure" >> $GITHUB_OUTPUT
          fi
          
          echo "issues<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ISSUES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate file structure report
        if: always()
        run: |
          echo "### üìÅ File Structure Validation" > structure-report.md
          echo "" >> structure-report.md
          
          if [ "${{ steps.structure-check.outputs.result }}" = "success" ]; then
            echo "‚úÖ **File structure validation passed**" >> structure-report.md
            echo "" >> structure-report.md
            echo "All required files and directories are present:" >> structure-report.md
            echo "- Configuration files (.gitignore, .commitlintrc.json, etc.)" >> structure-report.md
            echo "- GitHub workflows directory" >> structure-report.md
            echo "- Inventory directory" >> structure-report.md
            echo "- No problematic files detected" >> structure-report.md
          else
            echo "‚ùå **File structure validation failed**" >> structure-report.md
            echo "" >> structure-report.md
            echo "**Issues found:**" >> structure-report.md
            echo -e "${{ steps.structure-check.outputs.issues }}" >> structure-report.md
            echo "" >> structure-report.md
            echo "**Resolution steps:**" >> structure-report.md
            echo "1. Add missing required files" >> structure-report.md
            echo "2. Create missing directories" >> structure-report.md
            echo "3. Add problematic files to .gitignore" >> structure-report.md
            echo "4. Consider using Git LFS for large files" >> structure-report.md
          fi

      - name: Upload file structure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: file-structure-report
          path: structure-report.md
          retention-days: 7

  # Job 7: Comprehensive PR Summary and Comment
  pr-summary:
    name: Generate PR Summary
    runs-on: ubuntu-latest
    needs: [lint-validation, pre-commit-validation, commit-validation, docker-build-validation, documentation-validation, file-structure-validation]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: validation-reports

      - name: Generate comprehensive summary
        id: summary
        run: |
          echo "## üîç Pull Request Validation Results" > pr-summary.md
          echo "" >> pr-summary.md
          echo "*Validation completed on $(date -u +'%Y-%m-%d %H:%M:%S UTC')*" >> pr-summary.md
          echo "" >> pr-summary.md
          
          # Initialize counters
          TOTAL_CHECKS=0
          PASSED_CHECKS=0
          FAILED_CHECKS=0
          SKIPPED_CHECKS=0
          CRITICAL_FAILURES=0
          
          # Status badges
          echo "### üìä Status Overview" >> pr-summary.md
          echo "" >> pr-summary.md
          
          # Check lint validation results
          LINT_STATUS="‚ùì"
          if [ "${{ needs.lint-validation.result }}" = "success" ]; then
            LINT_STATUS="‚úÖ"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          elif [ "${{ needs.lint-validation.result }}" = "failure" ]; then
            LINT_STATUS="‚ùå"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          else
            LINT_STATUS="‚è≠Ô∏è"
            SKIPPED_CHECKS=$((SKIPPED_CHECKS + 1))
          fi
          TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
          
          # Check pre-commit validation
          PRECOMMIT_STATUS="‚ùì"
          if [ "${{ needs.pre-commit-validation.result }}" = "success" ]; then
            PRECOMMIT_STATUS="‚úÖ"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          elif [ "${{ needs.pre-commit-validation.result }}" = "failure" ]; then
            PRECOMMIT_STATUS="‚ùå"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          else
            PRECOMMIT_STATUS="‚è≠Ô∏è"
            SKIPPED_CHECKS=$((SKIPPED_CHECKS + 1))
          fi
          TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
          
          # Check commit validation
          COMMIT_STATUS="‚ùì"
          if [ "${{ needs.commit-validation.result }}" = "success" ]; then
            COMMIT_STATUS="‚úÖ"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          elif [ "${{ needs.commit-validation.result }}" = "failure" ]; then
            COMMIT_STATUS="‚ùå"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          else
            COMMIT_STATUS="‚è≠Ô∏è"
            SKIPPED_CHECKS=$((SKIPPED_CHECKS + 1))
          fi
          TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
          
          # Check Docker validation
          DOCKER_STATUS="‚ùì"
          if [ "${{ needs.docker-build-validation.result }}" = "success" ]; then
            DOCKER_STATUS="‚úÖ"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          elif [ "${{ needs.docker-build-validation.result }}" = "failure" ]; then
            DOCKER_STATUS="‚ùå"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          else
            DOCKER_STATUS="‚è≠Ô∏è"
            SKIPPED_CHECKS=$((SKIPPED_CHECKS + 1))
          fi
          TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
          
          # Check documentation validation
          DOCS_STATUS="‚ùì"
          if [ "${{ needs.documentation-validation.result }}" = "success" ]; then
            DOCS_STATUS="‚úÖ"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          elif [ "${{ needs.documentation-validation.result }}" = "failure" ]; then
            DOCS_STATUS="‚ö†Ô∏è"  # Non-critical
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
          else
            DOCS_STATUS="‚è≠Ô∏è"
            SKIPPED_CHECKS=$((SKIPPED_CHECKS + 1))
          fi
          TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
          
          # Check file structure validation
          STRUCTURE_STATUS="‚ùì"
          if [ "${{ needs.file-structure-validation.result }}" = "success" ]; then
            STRUCTURE_STATUS="‚úÖ"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
          elif [ "${{ needs.file-structure-validation.result }}" = "failure" ]; then
            STRUCTURE_STATUS="‚ùå"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          else
            STRUCTURE_STATUS="‚è≠Ô∏è"
            SKIPPED_CHECKS=$((SKIPPED_CHECKS + 1))
          fi
          TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
          
          # Create status table
          echo "| Check | Status | Description |" >> pr-summary.md
          echo "|-------|--------|-------------|" >> pr-summary.md
          echo "| **Lint Validation** | $LINT_STATUS | Code formatting and style checks |" >> pr-summary.md
          echo "| **Pre-commit Hooks** | $PRECOMMIT_STATUS | All configured pre-commit validations |" >> pr-summary.md
          echo "| **Commit Messages** | $COMMIT_STATUS | Conventional commit format validation |" >> pr-summary.md
          echo "| **Docker Builds** | $DOCKER_STATUS | Container build validation |" >> pr-summary.md
          echo "| **Documentation** | $DOCS_STATUS | Documentation completeness check |" >> pr-summary.md
          echo "| **File Structure** | $STRUCTURE_STATUS | Required files and directories |" >> pr-summary.md
          echo "" >> pr-summary.md
          
          # Overall status
          if [ $CRITICAL_FAILURES -gt 0 ]; then
            echo "### üö® Overall Status: **BLOCKED**" >> pr-summary.md
            echo "" >> pr-summary.md
            echo "**$CRITICAL_FAILURES critical issues** must be resolved before merging." >> pr-summary.md
            OVERALL_STATUS="blocked"
          elif [ $FAILED_CHECKS -gt 0 ]; then
            echo "### ‚ö†Ô∏è Overall Status: **WARNING**" >> pr-summary.md
            echo "" >> pr-summary.md
            echo "Some non-critical issues found. Consider resolving before merging." >> pr-summary.md
            OVERALL_STATUS="warning"
          else
            echo "### ‚úÖ Overall Status: **PASSED**" >> pr-summary.md
            echo "" >> pr-summary.md
            echo "üéâ All validation checks passed successfully!" >> pr-summary.md
            OVERALL_STATUS="passed"
          fi
          
          echo "" >> pr-summary.md
          echo "**Summary:** $PASSED_CHECKS passed, $FAILED_CHECKS failed, $SKIPPED_CHECKS skipped out of $TOTAL_CHECKS total checks" >> pr-summary.md
          echo "" >> pr-summary.md
          
          # Add detailed sections from individual reports
          echo "### üìã Detailed Results" >> pr-summary.md
          echo "" >> pr-summary.md
          
          # Include individual reports
          for report_dir in validation-reports/*; do
            if [ -d "$report_dir" ]; then
              for report_file in "$report_dir"/*.md; do
                if [ -f "$report_file" ]; then
                  echo "<details>" >> pr-summary.md
                  echo "<summary>$(basename "$report_file" .md | sed 's/-/ /g' | sed 's/\b\w/\U&/g')</summary>" >> pr-summary.md
                  echo "" >> pr-summary.md
                  cat "$report_file" >> pr-summary.md
                  echo "" >> pr-summary.md
                  echo "</details>" >> pr-summary.md
                  echo "" >> pr-summary.md
                fi
              done
            fi
          done
          
          # Add links and resources
          echo "### üîó Resources & Next Steps" >> pr-summary.md
          echo "" >> pr-summary.md
          
          if [ "$OVERALL_STATUS" = "blocked" ]; then
            echo "**üö® Action Required:**" >> pr-summary.md
            echo "1. Review failed checks above" >> pr-summary.md
            echo "2. Fix critical issues locally" >> pr-summary.md
            echo "3. Run \`pre-commit run --all-files\` to test fixes" >> pr-summary.md
            echo "4. Commit and push fixes" >> pr-summary.md
            echo "" >> pr-summary.md
          fi
          
          echo "**üìö Helpful Links:**" >> pr-summary.md
          echo "- [Pre-commit Hooks Guide](https://pre-commit.com/)" >> pr-summary.md
          echo "- [Conventional Commits](https://conventionalcommits.org/)" >> pr-summary.md
          echo "- [Markdown Linting Rules](https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md)" >> pr-summary.md
          echo "- [YAML Linting Guide](https://yamllint.readthedocs.io/)" >> pr-summary.md
          echo "- [Docker Best Practices](https://docs.docker.com/develop/dev-best-practices/)" >> pr-summary.md
          echo "" >> pr-summary.md
          
          echo "**üîí Security Note:** This validation focuses on code quality and standards. Security scanning is handled by the [Security Workflow](https://github.com/${{ github.repository }}/actions/workflows/security.yml)." >> pr-summary.md
          echo "" >> pr-summary.md
          
          echo "---" >> pr-summary.md
          echo "*Validation powered by GitHub Actions | Generated at $(date -u +'%Y-%m-%d %H:%M:%S UTC')*" >> pr-summary.md
          
          # Set outputs
          echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "critical_failures=$CRITICAL_FAILURES" >> $GITHUB_OUTPUT
          echo "total_failed=$FAILED_CHECKS" >> $GITHUB_OUTPUT
          
          {
            echo 'pr_comment<<EOF'
            cat pr-summary.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prComment = `${{ steps.summary.outputs.pr_comment }}`;
            
            // Find existing validation comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && 
              comment.body.includes('üîç Pull Request Validation Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: prComment
              });
              console.log('Updated existing PR validation comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: prComment
              });
              console.log('Created new PR validation comment');
            }

      - name: Set PR status check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const overallStatus = '${{ steps.summary.outputs.overall_status }}';
            const criticalFailures = parseInt('${{ steps.summary.outputs.critical_failures }}') || 0;
            
            let state, description;
            
            if (overallStatus === 'blocked') {
              state = 'failure';
              description = `${criticalFailures} critical issue(s) must be resolved`;
            } else if (overallStatus === 'warning') {
              state = 'success'; // Allow merge but warn
              description = 'Some non-critical issues found';
            } else {
              state = 'success';
              description = 'All validation checks passed';
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'PR Validation'
            });

      - name: Upload comprehensive summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-validation-summary
          path: pr-summary.md
          retention-days: 30

  # Job 8: Cleanup and Performance Monitoring
  cleanup-and-monitoring:
    name: Cleanup & Performance Monitoring
    runs-on: ubuntu-latest
    needs: [lint-validation, pre-commit-validation, commit-validation, docker-build-validation, documentation-validation, file-structure-validation, pr-summary]
    if: always()
    steps:
      - name: Performance summary
        run: |
          echo "## ‚ö° PR Validation Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Lint Validation:** ${{ needs.lint-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-commit Validation:** ${{ needs.pre-commit-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Validation:** ${{ needs.commit-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Build Validation:** ${{ needs.docker-build-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation Validation:** ${{ needs.documentation-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **File Structure Validation:** ${{ needs.file-structure-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Summary Generation:** ${{ needs.pr-summary.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Pull Request](${{ github.event.pull_request.html_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Scan Results](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
          echo "- [All Workflows](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Workflow Efficiency" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution:** ‚úÖ Matrix jobs and parallel validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Caching Strategy:** ‚úÖ npm, pip, Docker, and tool caches enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Optimization:** ‚úÖ Fail-fast for critical issues" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration:** ‚úÖ Complements security workflow without duplication" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup temporary resources
        run: |
          echo "üßπ Performing cleanup..."
          echo "Temporary Docker images and cache cleanup would happen here in a real environment"
          echo "This job serves as a monitoring and cleanup hook"
          echo "‚úÖ Cleanup completed"