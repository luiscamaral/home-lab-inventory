name: Test Self-hosted Runner

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test-runner:
    name: Test Dockermaster Runner
    runs-on: [self-hosted, dockermaster]
    timeout-minutes: 5
    
    steps:
      - name: üéØ Runner Information
        run: |
          echo "## Runner Information"
          echo "Runner Name: ${{ runner.name }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Arch: ${{ runner.arch }}"
          echo "Runner Temp: ${{ runner.temp }}"
          echo "Hostname: $(hostname)"
          echo "Current User: $(whoami)"
          echo "Current Directory: $(pwd)"
          echo "Date: $(date)"
      
      - name: üê≥ Docker Verification
        run: |
          echo "## Docker Status"
          echo "### Docker Version"
          docker version
          echo ""
          echo "### Docker Info Summary"
          docker info --format "Containers: {{.Containers}}
          Running: {{.ContainersRunning}}
          Images: {{.Images}}
          Server Version: {{.ServerVersion}}
          Storage Driver: {{.Driver}}"
          echo ""
          echo "### Running Containers (first 5)"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | head -6
      
      - name: üìÅ Deployment Path Access
        run: |
          echo "## Deployment Path Verification"
          echo "Checking /deployment mount (read-only):"
          if [ -d "/deployment" ]; then
            echo "‚úÖ /deployment directory exists"
            echo "Contents (first 10 items):"
            ls -la /deployment/ | head -11
            echo ""
            echo "Subdirectories:"
            find /deployment -maxdepth 1 -type d | head -10
          else
            echo "‚ùå /deployment directory not found"
          fi
      
      - name: üåê Network Connectivity
        run: |
          echo "## Network Tests"
          echo "### GitHub API"
          if curl -s -o /dev/null -w "%{http_code}" https://api.github.com | grep -q "200"; then
            echo "‚úÖ GitHub API: Reachable"
          else
            echo "‚ùå GitHub API: Unreachable"
          fi
          
          echo "### Docker Hub"
          if curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com | grep -q "200"; then
            echo "‚úÖ Docker Hub: Reachable"
          else
            echo "‚ùå Docker Hub: Unreachable"
          fi
          
          echo "### GitHub Container Registry"
          if curl -s -o /dev/null -w "%{http_code}" https://ghcr.io | grep -q "200\|301\|302"; then
            echo "‚úÖ GitHub Container Registry: Reachable"
          else
            echo "‚ùå GitHub Container Registry: Unreachable"
          fi
      
      - name: üíæ System Resources
        run: |
          echo "## System Resources"
          echo "### Disk Usage"
          df -h / /nfs/dockermaster | grep -v "Filesystem"
          echo ""
          echo "### Memory Usage"
          free -h
          echo ""
          echo "### CPU Info"
          nproc
          echo "CPU cores available"
      
      - name: ‚úÖ Summary
        run: |
          echo "## Test Summary"
          echo "üéâ **Self-hosted runner is working correctly!**"
          echo ""
          echo "The runner can:"
          echo "- ‚úÖ Execute workflows"
          echo "- ‚úÖ Access Docker daemon"
          echo "- ‚úÖ Read deployment configurations"
          echo "- ‚úÖ Connect to external services"
          echo ""
          echo "Runner is ready for CI/CD operations!"