name: Build and Push Docker Images

on:
  push:
    branches: [main]
    paths:
      - 'dockermaster/docker/compose/**/Dockerfile'
      - 'dockermaster/docker/compose/**/*.dockerfile'
      - '.github/workflows/build-images.yml'
  pull_request:
    branches: [main]
    paths:
      - 'dockermaster/docker/compose/**/Dockerfile'
      - 'dockermaster/docker/compose/**/*.dockerfile'
  workflow_dispatch:
    inputs:
      services:
        description: 'Comma-separated list of services to build (empty for all)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}

jobs:
  detect-services:
    name: Detect Services to Build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-services: ${{ steps.set-matrix.outputs.has-services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up matrix
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.services }}" ]; then
            # Manual trigger with specific services
            IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.services }}"
            JSON_ARRAY=$(printf '%s\n' "${SERVICES[@]}" | jq -R . | jq -s .)
          else
            # Find all directories with Dockerfiles
            SERVICES=()
            for dockerfile in $(find dockermaster/docker/compose -name "Dockerfile" -o -name "*.dockerfile" 2>/dev/null); do
              SERVICE_DIR=$(dirname "$dockerfile" | xargs basename)
              # Check if this service has a Dockerfile (not using pre-built images only)
              if [ -f "$(dirname "$dockerfile")/Dockerfile" ]; then
                SERVICES+=("$SERVICE_DIR")
              fi
            done
            
            # Remove duplicates
            UNIQUE_SERVICES=($(printf '%s\n' "${SERVICES[@]}" | sort -u))
            
            if [ ${#UNIQUE_SERVICES[@]} -eq 0 ]; then
              echo "No services with Dockerfiles found"
              JSON_ARRAY='[]'
            else
              JSON_ARRAY=$(printf '%s\n' "${UNIQUE_SERVICES[@]}" | jq -R . | jq -s .)
            fi
          fi
          
          echo "Services to build: $JSON_ARRAY"
          echo "matrix={\"service\":$JSON_ARRAY}" >> $GITHUB_OUTPUT
          
          if [ "$JSON_ARRAY" = "[]" ]; then
            echo "has-services=false" >> $GITHUB_OUTPUT
          else
            echo "has-services=true" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build ${{ matrix.service }}
    needs: detect-services
    if: needs.detect-services.outputs.has-services == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.detect-services.outputs.matrix)}}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Check for Dockerfile
        id: check
        run: |
          if [ -f "dockermaster/docker/compose/${{ matrix.service }}/Dockerfile" ]; then
            echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
            echo "context=./dockermaster/docker/compose/${{ matrix.service }}" >> $GITHUB_OUTPUT
          else
            echo "::error::No Dockerfile found for service ${{ matrix.service }}"
            exit 1
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.check.outputs.context }}
          file: ${{ steps.check.outputs.context }}/${{ steps.check.outputs.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment summary
        if: github.event_name != 'pull_request'
        run: |
          echo "### 🐳 Image Published: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.IMAGE_PREFIX }}/${{ matrix.service }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | while read tag; do
            echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY